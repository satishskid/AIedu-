{
  "id": "intro-to-programming",
  "title": "Introduction to Programming",
  "description": "Learn the basics of programming with interactive examples.",
  "difficulty": "beginner",
  "category": "fundamentals",
  "estimatedTime": 30,
  "content": {
    "sections": [
      {
        "title": "What is Programming?",
        "content": "Programming is the process of creating instructions for computers to follow. Think of it like writing a recipe - you give step-by-step directions that the computer can understand and execute."
      },
      {
        "title": "Why Learn Programming?",
        "content": "Programming is everywhere around us! From the apps on your phone to the games you play, from websites to smart home devices - everything runs on code. Learning to program helps you:",
        "examples": [
          {
            "title": "Benefits of Programming",
            "content": "• Solve problems creatively\n• Build your own apps and games\n• Understand how technology works\n• Develop logical thinking skills\n• Create tools to help others\n• Express your ideas through code"
          }
        ]
      },
      {
        "title": "Your First Program",
        "content": "Let's start with the traditional first program that every programmer writes - 'Hello, World!' This simple program teaches us how to display text on the screen.",
        "examples": [
          {
            "language": "javascript",
            "title": "Hello, World! in JavaScript",
            "content": "console.log(\"Hello, World!\");\n\n// This line tells the computer to:\n// 1. Find the console (like a text display)\n// 2. Log (write) the message \"Hello, World!\"\n// 3. Show it to the user"
          },
          {
            "language": "python",
            "title": "Hello, World! in Python",
            "content": "print(\"Hello, World!\")\n\n# This line tells the computer to:\n# 1. Print (display) the message \"Hello, World!\"\n# 2. Show it to the user"
          }
        ]
      },
      {
        "title": "How Computers Think",
        "content": "Computers are very literal - they follow instructions exactly as written. They can't guess what you mean, so we need to be very precise with our instructions.",
        "examples": [
          {
            "title": "Making a Sandwich - Human vs Computer Instructions",
            "content": "Human instructions:\n\"Make me a peanut butter sandwich\"\n\nComputer instructions:\n1. Get two slices of bread\n2. Open the peanut butter jar\n3. Get a knife\n4. Put knife in peanut butter\n5. Spread peanut butter on one slice\n6. Put the slices together\n7. Clean the knife\n8. Close the jar"
          }
        ]
      },
      {
        "title": "Basic Programming Concepts",
        "content": "All programming languages share some common concepts. Let's explore the building blocks that make up every program."
      },
      {
        "title": "1. Input and Output",
        "content": "Programs take information in (input) and give information back (output). It's like a conversation between you and the computer.",
        "examples": [
          {
            "language": "javascript",
            "title": "Getting User Input",
            "content": "// Getting input from the user\nlet userName = prompt(\"What's your name?\");\n\n// Processing the input\nlet greeting = \"Hello, \" + userName + \"!\";\n\n// Giving output back to the user\nconsole.log(greeting);"
          }
        ]
      },
      {
        "title": "2. Storing Information (Variables)",
        "content": "Variables are like labeled boxes where we store information that we want to use later in our program.",
        "examples": [
          {
            "language": "javascript",
            "title": "Using Variables",
            "content": "// Store information in variables\nlet playerName = \"Alex\";\nlet playerScore = 100;\nlet gameLevel = 1;\n\n// Use the variables\nconsole.log(playerName + \" has \" + playerScore + \" points!\");\nconsole.log(\"Current level: \" + gameLevel);"
          }
        ]
      },
      {
        "title": "3. Making Decisions (Conditionals)",
        "content": "Programs can make decisions based on different conditions. This is like asking 'if this, then that' questions.",
        "examples": [
          {
            "language": "javascript",
            "title": "Making Decisions",
            "content": "let temperature = 75;\n\nif (temperature > 80) {\n    console.log(\"It's hot! Wear shorts.\");\n} else if (temperature > 60) {\n    console.log(\"Nice weather! Perfect for a walk.\");\n} else {\n    console.log(\"It's cold! Wear a jacket.\");\n}"
          }
        ]
      },
      {
        "title": "4. Repeating Actions (Loops)",
        "content": "Instead of writing the same code over and over, we can use loops to repeat actions automatically.",
        "examples": [
          {
            "language": "javascript",
            "title": "Counting with Loops",
            "content": "// Count from 1 to 5\nfor (let i = 1; i <= 5; i++) {\n    console.log(\"Count: \" + i);\n}\n\n// This prints:\n// Count: 1\n// Count: 2\n// Count: 3\n// Count: 4\n// Count: 5"
          }
        ]
      },
      {
        "title": "Programming Languages",
        "content": "Just like humans speak different languages, there are many programming languages. Each has its own strengths and is used for different purposes.",
        "examples": [
          {
            "title": "Popular Programming Languages",
            "content": "• **JavaScript** - Web pages and apps\n• **Python** - Data science, AI, and general programming\n• **Java** - Large applications and Android apps\n• **C++** - Games and system programming\n• **Swift** - iPhone and iPad apps\n• **Scratch** - Visual programming for beginners"
          }
        ]
      },
      {
        "title": "Your Programming Journey",
        "content": "Learning to program is like learning to play a musical instrument - it takes practice, but it's incredibly rewarding! Start with small projects and gradually work your way up to bigger challenges.",
        "examples": [
          {
            "title": "Next Steps",
            "content": "1. **Practice the basics** - Variables, loops, and conditions\n2. **Build small projects** - Calculator, guessing game, to-do list\n3. **Learn problem-solving** - Break big problems into smaller ones\n4. **Join communities** - Connect with other programmers\n5. **Keep experimenting** - Try new things and don't be afraid to make mistakes!"
          }
        ]
      }
    ]
  },
  "exercises": [
    "hello-world",
    "variables-intro"
  ]
}